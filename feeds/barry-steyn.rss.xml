<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Doctrina - Barry Steyn</title><link>https://doctrina.org/</link><description></description><lastBuildDate>Tue, 20 Sep 2016 00:00:00 -0700</lastBuildDate><item><title>Why You Shouldn't Trust Successful People's Advice</title><link>https://doctrina.org/Dont-Trust-Successful-People-Advice.html</link><description>&lt;h1 id="why-you-shouldnt-trust-successful-peoples-advice"&gt;Why You Shouldn't Trust Successful People's Advice&lt;/h1&gt;
&lt;p&gt;It seems sensible to model oneself on traits that are displayed by successful
people. And while this is not inherently incorrect, there is a problem when
traits of less successful are ignored.&lt;/p&gt;
&lt;p&gt;This video dispels the myth about only trusting successful people's advice …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Tue, 20 Sep 2016 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2016-09-20:/Dont-Trust-Successful-People-Advice.html</guid><category>Article</category><category>interesting</category><category>video</category></item><item><title>Greek Lemon Chicken And Potatoes</title><link>https://doctrina.org/Greek-Lemon-Chicken-And-Potatoes.html</link><description>&lt;p&gt;&lt;span class="videobox"&gt;
                    &lt;iframe width="640" height="390"
                        src='https://www.youtube.com/embed/h6OSMbfhIao'
                        frameborder='0' webkitAllowFullScreen
                        mozallowfullscreen allowFullScreen&gt;
                    &lt;/iframe&gt;
                &lt;/span&gt;&lt;/p&gt;
&lt;h1 id="ingredient"&gt;Ingredient&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1 kilogram&lt;/strong&gt; chicken wings&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1 tablespoon&lt;/strong&gt; kosher salt&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1 teaspoon&lt;/strong&gt; freshly ground black pepper&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1 teaspoon dried&lt;/strong&gt; rosemary&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1 rounded tablespoon&lt;/strong&gt; dried oregano&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;pinch&lt;/strong&gt; of cayenne&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;6 cloves of garlic&lt;/strong&gt;, finely minced&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1/2 cup&lt;/strong&gt; fresh lemon juice&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1/2 cup&lt;/strong&gt; olive oil&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3 russet potatoes&lt;/strong&gt;, cut in quarters …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Tue, 10 May 2016 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2016-05-10:/Greek-Lemon-Chicken-And-Potatoes.html</guid><category>Recipe</category><category>entree</category></item><item><title>Thai Pineapple Chicken Curry</title><link>https://doctrina.org/Thai-Pineapple-Chicken-Curry.html</link><description>&lt;h1 id="ingredients"&gt;Ingredients&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1 table-spoon&lt;/strong&gt; olive oil&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2&lt;/strong&gt; chicken breasts, cubed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1 table-spoon&lt;/strong&gt; grated ginger&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2 cloves&lt;/strong&gt; garlic, crushed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2 table-spoons&lt;/strong&gt; red curry paste&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;½ cup&lt;/strong&gt; chicken broth&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1 teaspoon&lt;/strong&gt; sugar&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;½ teaspoon&lt;/strong&gt; ground turmeric&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;½ cup&lt;/strong&gt; bamboo shoots&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4&lt;/strong&gt; kaffir lime leaves&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1.5 table-spoons&lt;/strong&gt; fish sauce&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2 cups&lt;/strong&gt; freshly diced …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Mon, 09 May 2016 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2016-05-09:/Thai-Pineapple-Chicken-Curry.html</guid><category>Recipe</category><category>entree</category><category>thai-recipes</category></item><item><title>Hollandaise Sauce</title><link>https://doctrina.org/Hollandaise-Sauce.html</link><description>&lt;p&gt;&lt;span class="videobox"&gt;
                    &lt;iframe width="640" height="390"
                        src='https://www.youtube.com/embed/sPKWYM8-YgY'
                        frameborder='0' webkitAllowFullScreen
                        mozallowfullscreen allowFullScreen&gt;
                    &lt;/iframe&gt;
                &lt;/span&gt;&lt;/p&gt;
&lt;h1 id="ingredients"&gt;Ingredients&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1 large egg yolk&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4 tablespoons&lt;/strong&gt; cold unsalted butter, cubed&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2 tablespoons&lt;/strong&gt; cold water&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1 tablespoon&lt;/strong&gt; fresh lemon juice (you can always add more to taste)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="method"&gt;Method&lt;/h1&gt;
&lt;p&gt;Take all ingredients, put it in a metal bowl, and whisk while heating over medium heat (see video).&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2016-05-07:/Hollandaise-Sauce.html</guid><category>Recipe</category><category>sauce</category><category>other-recipes</category></item><item><title>Thai Turkey Skillet</title><link>https://doctrina.org/Thai-Turkey-Skillet.html</link><description>&lt;p&gt;&lt;span class="videobox"&gt;
                    &lt;iframe width="640" height="390"
                        src='https://www.youtube.com/embed/kqGZbDocK2w'
                        frameborder='0' webkitAllowFullScreen
                        mozallowfullscreen allowFullScreen&gt;
                    &lt;/iframe&gt;
                &lt;/span&gt;&lt;/p&gt;
&lt;h1 id="ingredients"&gt;Ingredients&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;3 lb&lt;/strong&gt; turkey or chicken mince&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;4 large&lt;/strong&gt; red peppers, sliced&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1.5 table-spoons&lt;/strong&gt; of ground ginger&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3 teaspoons&lt;/strong&gt; crushed red pepper flakes&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;9&lt;/strong&gt; cloves of crushed garlic&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;9 table-spoons&lt;/strong&gt; natural peanut butter&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;6 table-spoons&lt;/strong&gt; lime juice&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;6 table-spoons&lt;/strong&gt; soy sauce&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;3 table-spoons&lt;/strong&gt; sesame oil&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;1.5 cups&lt;/strong&gt; chopped …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Sat, 07 May 2016 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2016-05-07:/Thai-Turkey-Skillet.html</guid><category>Recipe</category><category>entree</category></item><item><title>Big O Notation</title><link>https://doctrina.org/big-o-notation.html</link><description>&lt;h1 id=introduction&gt;Introduction&lt;/h1&gt;
&lt;p&gt;&lt;span class=videobox&gt;
                    &lt;iframe width=640 height=390 src="https://www.youtube.com/embed/eNsKNfFUqFo" frameborder=0 webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""&gt;
                    &lt;/iframe&gt;
                &lt;/span&gt;&lt;/p&gt;
&lt;h1 id=definition&gt;Definition&lt;/h1&gt;
&lt;p&gt;Big O notation concerns functions &lt;strong&gt;defined on the positive integers&lt;/strong&gt;:
A function &lt;span class=math&gt;\(T(n)\)&lt;/span&gt; is said to be &lt;em&gt;big O&lt;/em&gt; of &lt;span class=math&gt;\(f(n)\)&lt;/span&gt; if eventually,
(&lt;em&gt;for all sufficiently large values of &lt;span class=math&gt;\(n\)&lt;/span&gt;&lt;/em&gt;), &lt;span class=math&gt;\(T(n)\)&lt;/span&gt; is bounded above
by a &lt;em&gt;constant multiple&lt;/em&gt; of &lt;span class=math&gt;\(f(n)\)&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=formal-mathematical-definition&gt;Formal Mathematical Definition&lt;/h2&gt;
&lt;div class=math&gt;$$
T …&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Wed, 03 Feb 2016 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:doctrina.org,2016-02-03:/big-o-notation.html</guid><category>Article</category></item><item><title>The CAP Theorem</title><link>https://doctrina.org/CAP-Theorem.html</link><description>&lt;h1 id=cap-theorem&gt;CAP Theorem&lt;/h1&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/CAP_theorem"&gt;CAP Theorem&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt; defines constraints
of a distributed system. Here is a concise very well explained video about the
topic.&lt;/p&gt;
&lt;p&gt;&lt;span class=videobox&gt;
                    &lt;iframe width=640 height=390 src="https://www.youtube.com/embed/Jw1iFr4v58M" frameborder=0 webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen=""&gt;
                    &lt;/iframe&gt;
                &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Also, read about &lt;a href="http://www.infoq.com/articles/cap-twelve-years-later-how-the-rules-have-changed"&gt;how the CAP rules have changed&lt;/a&gt;&lt;sup class=print&gt;L2&lt;/sup&gt;
since Eric Brewer first published the theorem.&lt;/p&gt;&lt;h2 class=print&gt;Links&lt;/h2&gt;&lt;div class=print style="margin-left: 2.0em;"&gt;&lt;ol class=print-links&gt;&lt;li&gt;https://en.wikipedia.org/wiki/CAP_theorem&lt;/li&gt;&lt;li&gt;http://www.infoq …&lt;/li&gt;&lt;/ol&gt;&lt;/div&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Tue, 19 Jan 2016 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:doctrina.org,2016-01-19:/CAP-Theorem.html</guid><category>Article</category><category>distributed systems</category><category>system design</category></item><item><title>The Archer's Paradox</title><link>https://doctrina.org/Archers-Paradox.html</link><description>&lt;h1 id="the-archers-paradox"&gt;The Archer's Paradox&lt;/h1&gt;
&lt;p&gt;Really interesting video explaining how an arrow, fired from a bow, is able to
hit it's mark with the bow being in the way.&lt;/p&gt;
&lt;p&gt;&lt;span class="videobox"&gt;
                    &lt;iframe width="640" height="390"
                        src='https://www.youtube.com/embed/O7zewtuUM_0'
                        frameborder='0' webkitAllowFullScreen
                        mozallowfullscreen allowFullScreen&gt;
                    &lt;/iframe&gt;
                &lt;/span&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Wed, 23 Dec 2015 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:doctrina.org,2015-12-23:/Archers-Paradox.html</guid><category>Article</category><category>interesting</category><category>video</category></item><item><title>The Car Differential</title><link>https://doctrina.org/Car-Differential.html</link><description>&lt;h1 id=a-car-differential&gt;A Car Differential&lt;/h1&gt;
&lt;p&gt;When turning a corner, one wheel must necessarily turn faster than the other
wheel. This is achieved by each wheel being independent to the other wheel. Both
wheels are able to work together in harmony by being connected to the
&lt;a href="https://en.wikipedia.org/wiki/Differential_(mechanical_device)"&gt;differential&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt;.
This video explains how it …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Wed, 23 Dec 2015 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:doctrina.org,2015-12-23:/Car-Differential.html</guid><category>Article</category><category>interesting</category><category>video</category><category>engineering</category></item><item><title>Maximum Amount Of Nodes Of A Certain Height</title><link>https://doctrina.org/nodes-of-certain-height.html</link><description>&lt;h1 id=introduction&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Given a binary tree with &lt;span class=math&gt;\(n\)&lt;/span&gt; nodes, there can be at most &lt;span class=math&gt;\(\left\lceil \frac{n}{2^{h+1}} \right\rceil\)&lt;/span&gt; nodes with height &lt;span class=math&gt;\(h\)&lt;/span&gt;. Here follows a proof&lt;sup id=sf-nodes-of-certain-height-1-back&gt;&lt;a href=#sf-nodes-of-certain-height-1 class=simple-footnote title="This proof is not my own, I found the main ideas by doing a Google Search. Unfortunately, I cannot find who to acknowledge, so if this looks familiar, please shout"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h1 id=background-knowledge&gt;Background Knowledge&lt;/h1&gt;
&lt;h2 id=tree-height&gt;Tree Height&lt;/h2&gt;
&lt;p&gt;In a binary tree, &lt;em&gt;height&lt;/em&gt; of a node is defined as the number of edges …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Thu, 17 Sep 2015 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2015-09-17:/nodes-of-certain-height.html</guid><category>Article</category><category>datastructures</category><category>heap</category></item><item><title>Const Liffy Pattern For C++</title><link>https://doctrina.org/Const-Liffy-Pattern.html</link><description>&lt;h1 id=introduction&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Immutable state has &lt;a href="http://www.drdobbs.com/cpp/practical-advantages-of-immutable-values/240163690"&gt;many advantages&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt;. Unfortunately, C++ is designed to easily mutate state. My colleague Vincent Lascaux shared a code snippet that tries to alleviate this problem by attempting to avoid normal variables in favor of using constants that are always initialized. I decided to name his pattern …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Thu, 04 Jun 2015 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2015-06-04:/Const-Liffy-Pattern.html</guid><category>Article</category><category>C++</category><category>Software Engineering</category></item><item><title>Maximum Height Of A Red-Black Tree</title><link>https://doctrina.org/maximum-height-of-red-black-tree.html</link><description>&lt;h1 id=introduction&gt;Introduction&lt;/h1&gt;
&lt;p&gt;My friend and colleague, &lt;a href="http://dome.hobbits.grus.uberspace.de/"&gt;Dominik Messinger&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt; was fortunate to learn about abstract data structures in high school&lt;sup id=sf-maximum-height-of-red-black-tree-1-back&gt;&lt;a href=#sf-maximum-height-of-red-black-tree-1 class=simple-footnote title="He is German, so I think this is a nod to the excellent school system in Germany."&gt;1&lt;/a&gt;&lt;/sup&gt;. After chatting to him one day, the topic of red-black trees came up. He studied &lt;a href="http://en.wikipedia.org/wiki/AVL_tree"&gt;AVL trees&lt;/a&gt;&lt;sup class=print&gt;L2&lt;/sup&gt; in depth at high school, but did not do the same for …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Mon, 11 May 2015 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2015-05-11:/maximum-height-of-red-black-tree.html</guid><category>Article</category><category>datastructures</category><category>red-black tree</category></item><item><title>Do Not Go Gentle Into That Good Night</title><link>https://doctrina.org/do-not-go-gentle-into-that-good-night.html</link><description>&lt;h1 id=do-not-go-gentle-into-that-good-night&gt;Do Not Go Gentle Into That Good Night&lt;/h1&gt;
&lt;p&gt;&lt;small&gt;By &lt;a href="http://en.wikipedia.org/wiki/Dylan_Thomas"&gt;Dylan Thomas&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Do not go gentle into that good night,&lt;br&gt;
Old age should burn and rave at close of day;&lt;br&gt;
Rage, rage against the dying of the light.&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Though wise men at their end know dark is right,&lt;br&gt;
Because their …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Thu, 02 Apr 2015 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2015-04-02:/do-not-go-gentle-into-that-good-night.html</guid><category>Article</category><category>art</category></item><item><title>The Starting Node Of A Cycle In A Linked List</title><link>https://doctrina.org/Starting_Node_Of_A_Cycle_In_A_Linked_List.html</link><description>&lt;h1 id=introduction&gt;Introduction&lt;/h1&gt;
&lt;p&gt;Given a &lt;a href="http://en.wikipedia.org/wiki/Linked_list#Singly_linked_list"&gt;singly linked list&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt; that has a cycle, how can one determine the first node in the cycle?&lt;/p&gt;
&lt;p&gt;&lt;img src="http://doctrina.org/images/ll-cycle-problem.png"&gt;&lt;/p&gt;
&lt;p&gt;Using the image above as an example, the aim would be to find the orange node.&lt;/p&gt;
&lt;h1 id=algorithm&gt;Algorithm&lt;/h1&gt;
&lt;p&gt;&lt;img src="http://doctrina.org/images/ll-cycle-intersection.png"&gt;
Use two iterators, but make one move at twice the speed of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Wed, 18 Feb 2015 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:doctrina.org,2015-02-18:/Starting_Node_Of_A_Cycle_In_A_Linked_List.html</guid><category>Article</category><category>algorithms</category><category>math</category></item><item><title>Merge Sort And Inversions</title><link>https://doctrina.org/Merge-Sort-And-Inversions.html</link><description>&lt;h1 id=merge-sort&gt;Merge Sort&lt;/h1&gt;
&lt;p&gt;Merge sort is the classic divide and conquor algorithm, and is used as a canonical example for explaining the topic. It is quite easy to implement (specially in Python) but I wanted to see a C implementation. Google found me some &lt;a href="http://www.stackoverflow.com"&gt;stack overflow&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt; links as well as …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Sat, 16 Mar 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2013-03-16:/Merge-Sort-And-Inversions.html</guid><category>Article</category><category>Software</category><category>Computer Science</category><category>Algorithms</category></item><item><title>JavaScript Lecture: Cryptography In The Browser</title><link>https://doctrina.org/JavaScript_Lecture:Cryptography_In_The_Browser.html</link><description>&lt;p&gt;I was recently asked to lecture the local Toronto JavaScript meetup about Cryptography in the browser. Here are my lecture slides. Apparently, there is a video of my talk that will be put up. When I get, I will link to it over here.&lt;/p&gt;
&lt;p&gt;Enjoy, and I would grateful for …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Thu, 14 Mar 2013 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2013-03-14:/JavaScript_Lecture:Cryptography_In_The_Browser.html</guid><category>Article</category><category>JavaScript</category><category>Cryptography</category><category>Lecture</category></item><item><title>Mathematical Nonsense - Inifinte Sum Series</title><link>https://doctrina.org/Mathematical_Nonsense_-Inifinite-Sum-Series.html</link><description>&lt;p&gt;The following fact for infinite series crops up all the time:&lt;/p&gt;
&lt;div class="math"&gt;$$ r\neq 1, 1+r+r^2+r^3+\ldots +r^k = \frac{r^{k+1}-1}{r-1} $$&lt;/div&gt;
&lt;h1 id="proof"&gt;Proof&lt;/h1&gt;
&lt;p&gt;The proof is by induction:&lt;/p&gt;
&lt;h3 id="base-case-k1"&gt;Base Case: k=1&lt;/h3&gt;
&lt;p&gt;For the base case, where k=1, the left hand side …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Sat, 02 Mar 2013 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:doctrina.org,2013-03-02:/Mathematical_Nonsense_-Inifinite-Sum-Series.html</guid><category>Article</category><category>Math</category><category>Mathematical_Nonsense</category></item><item><title>The Master Method</title><link>https://doctrina.org/The-Master-Method.html</link><description>&lt;h1 id=the-master-method&gt;The Master Method&lt;/h1&gt;
&lt;p&gt;The master method is a way to analyse the worst case running times of a recursive function. Assume the recursive function is of the following form:&lt;/p&gt;
&lt;div class=math&gt;$$ T(n) = a\cdot T\left(\frac{n}{b}\right) + O(n)^d$$&lt;/div&gt;
&lt;p&gt;Where:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;a&lt;/strong&gt; is the number of subproblems created …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Wed, 27 Feb 2013 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:doctrina.org,2013-02-27:/The-Master-Method.html</guid><category>Notes</category><category>Software</category><category>Computer Science</category><category>Algorithms</category></item><item><title>Cryptographic Hash VS MAC: What You Need To Know</title><link>Cryptographic-Hash-Vs-MAC:What-You-Need-To-Know.html</link><description>&lt;h1 id=introduction&gt;Introduction&lt;/h1&gt;
&lt;p&gt;A MAC (&lt;a href="http://en.wikipedia.org/wiki/Message_authentication_code"&gt;message authentication code&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt;) plays a vital role in the world of cryptography. It ensures message integrity and combats &lt;em&gt;active attacks&lt;/em&gt;&lt;sup id=sf-Cryptographic-Hash-Vs-MAC:What-You-Need-To-Know-1-back&gt;&lt;a href=#sf-Cryptographic-Hash-Vs-MAC:What-You-Need-To-Know-1 class=simple-footnote title="An active attack is an attack whereby the message payload is changed tricking both communicating parties."&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;A MAC is often confused with a cryptograhic hash (i.e. SHA256). I think it was an unfortunate choice of words to use &lt;em&gt;cryptographic hash …&lt;/em&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Sun, 17 Feb 2013 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:None,2013-02-17:What-You-Need-To-Know.html</guid><category>Essay</category><category>cryptography</category></item><item><title>Mathematical Nonsense - Logarithm Equality</title><link>https://doctrina.org/Mathematical_Nonsense_Lemma-For-Logarithm-Equality.html</link><description>&lt;p&gt;It's been many years since I was first taught &lt;a href="http://en.wikipedia.org/wiki/Logarithm"&gt;logarithms&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt;. So when looking at a proof that hinged on the fact that &lt;span class=math&gt;\(a^{log_b n} = n^{log_b a}\)&lt;/span&gt;, I thought that the proof was wrong. Actually, it was my fault: &lt;span class=math&gt;\(a^{log_b n}\)&lt;/span&gt; is indeed equal to &lt;span class=math&gt;\(n^{log_b …&lt;/span&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Wed, 06 Feb 2013 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:doctrina.org,2013-02-06:/Mathematical_Nonsense_Lemma-For-Logarithm-Equality.html</guid><category>Article</category><category>Math</category><category>Mathematical_Nonsense</category></item><item><title>Base64 With OpenSSL C API</title><link>https://doctrina.org/Base64-With-OpenSSL-C-API.html</link><description>&lt;p&gt;OpenSSL has the ability to perform &lt;a href="http://en.wikipedia.org/wiki/Base64"&gt;Base64&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt; encodings and decodings. There seems to be many queries for working examples on how to use this functionality. Unfortunately, the &lt;a href="http://www.openssl.org/docs/crypto/BIO_f_base64.html"&gt;example&lt;/a&gt;&lt;sup class=print&gt;L2&lt;/sup&gt; on the OpenSSL site is quite obtuse, and every other example I have come accross does not work. So here …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Wed, 19 Dec 2012 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:doctrina.org,2012-12-19:/Base64-With-OpenSSL-C-API.html</guid><category>Article</category><category>Development</category><category>OpenSSL</category></item><item><title>Scrypt Authentiction For Node</title><link>https://doctrina.org/Scrypt-Authentication-For-Node.html</link><description>&lt;h1 id=scrypt-for-nodejs&gt;Scrypt For NodeJS&lt;/h1&gt;
&lt;p&gt;node-scrypt is a native node C++ wrapper for Colin Percival's scrypt &lt;a href="http://en.wikipedia.org/wiki/Key_derivation_function"&gt;key derivation&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt; utility.&lt;/p&gt;
&lt;h2 id=what-is-scrypt&gt;What Is Scrypt?&lt;/h2&gt;
&lt;p&gt;Scrypt is an advanced crypto library used mainly for &lt;a href="http://en.wikipedia.org/wiki/Key_derivation_function"&gt;key derivation&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt; (i.e. password authenticator). More information can be found here:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://www.tarsnap.com/scrypt.html"&gt;Tarsnap blurb about scrypt&lt;/a&gt;&lt;sup class=print&gt;L2&lt;/sup&gt; - Colin Percival …&lt;/li&gt;&lt;/ul&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Tue, 18 Dec 2012 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:doctrina.org,2012-12-18:/Scrypt-Authentication-For-Node.html</guid><category>Software Projects</category><category>Software</category><category>Projects</category><category>Development</category></item><item><title>Upstart With Python VirtualEnv</title><link>https://doctrina.org/VirtualEnv-With-Upstart.html</link><description>&lt;p&gt;I thought I would write this very short blog article to help anyone who would who wants to launch a &lt;a href="http://projects.unbit.it/uwsgi/"&gt;uwsgi&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt; server that refers to a python script in a virtual environment via upstart.&lt;/p&gt;
&lt;p&gt;In order to run a &lt;a href="http://projects.unbit.it/uwsgi/"&gt;uwsgi&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt; server that runs a python script that in …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Thu, 29 Nov 2012 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:doctrina.org,2012-11-29:/VirtualEnv-With-Upstart.html</guid><category>Article</category><category>System Administration</category></item><item><title>Plugin For Pelican To Enable Latex</title><link>https://doctrina.org/Plugin-For-Pelican-To-Enable-Latex.html</link><description>&lt;h1 id=latex-plugin-for-pelican&gt;Latex Plugin For Pelican&lt;/h1&gt;
&lt;p&gt;This plugin allows you to write mathematical equations in your articles using Latex.
It uses the MathJax Latex JavaScript library to render latex that is embedded in
between &lt;code&gt;$..$&lt;/code&gt; for inline math and &lt;code&gt;$$..$$&lt;/code&gt; for displayed math. It also allows for 
writing equations in by using &lt;code&gt;\begin{equation …&lt;/code&gt;&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Thu, 08 Nov 2012 00:00:00 -0800</pubDate><guid isPermaLink="false">tag:doctrina.org,2012-11-08:/Plugin-For-Pelican-To-Enable-Latex.html</guid><category>Software Projects</category><category>Software</category><category>Projects</category><category>Development</category></item><item><title>JavaScript: Why Understanding Scope And Closures Matter</title><link>JavaScript:Why-Understanding-Scope-And-Closures-Matter.html</link><description>&lt;p&gt;When first learning how to program, a fundamental aspect is to learn about scope. Many languages copy the C &lt;em&gt;syntax&lt;/em&gt; for scope, including JavaScript. But while these language copy the C rules for scope, JavaScript does not. This results in frustration and potentially problematic code. JavaScript instead implements scope in …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Fri, 26 Oct 2012 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:None,2012-10-26:Why-Understanding-Scope-And-Closures-Matter.html</guid><category>Article</category><category>development</category><category>JavaScript</category></item><item><title>JavaScript: Function Invocation Patterns</title><link>https://doctrina.org/Javascript-Function-Invocation-Patterns.html</link><description>&lt;p&gt;JavaScript has been described as a &lt;em&gt;Functional Oriented Language&lt;/em&gt; (this as opposed to Object Oriented Language). The reason is because functions in JavaScript do more than just separate logic into execution units, functions are first class citizens that also provide &lt;a href="http://doctrina.org/JavaScript:Why-Understanding-Scope-And-Closures-Matter.html"&gt;scope&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt; and the ability to create objects. Having such …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Fri, 19 Oct 2012 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2012-10-19:/Javascript-Function-Invocation-Patterns.html</guid><category>Article</category><category>development</category><category>JavaScript</category></item><item><title>Javascript: Object Prototypes</title><link>https://doctrina.org/Javascript-Objects-Prototypes.html</link><description>&lt;p&gt;This post discusses JavaScript objects with emphasis on its prototype linkings. After reading this post, you should understand the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Object creation in JavaScript.&lt;/li&gt;
&lt;li&gt;Prototype linkings.&lt;/li&gt;
&lt;li&gt;What &lt;code&gt;Object.prototype&lt;/code&gt; and &lt;code&gt;Function.prototype&lt;/code&gt; are used for.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Douglas_Crockford"&gt;Douglas Crockford's&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt; wonderful book &lt;a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742/ref=sr_1_1?ie=UTF8&amp;amp;qid=1346978272&amp;amp;sr=8-1&amp;amp;keywords=javascript+the+good+parts"&gt;JavaScript: The Good Parts&lt;/a&gt;&lt;sup class=print&gt;L2&lt;/sup&gt; does a fanastic job of …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Fri, 12 Oct 2012 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2012-10-12:/Javascript-Objects-Prototypes.html</guid><category>Article</category><category>development</category><category>JavaScript</category></item><item><title>Why RSA Works: Three Fundamental Questions Answered</title><link>https://doctrina.org/Why-RSA-Works-Three-Fundamental-Questions-Answered.html</link><description>&lt;p&gt;This is part two of a series of two blog posts about RSA (&lt;a href="http://doctrina.org/How-RSA-Works-With-Examples.html"&gt;part 1&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt; explains &lt;em&gt;how&lt;/em&gt; RSA works). This post examines &lt;em&gt;why&lt;/em&gt; RSA works as it does by answering &lt;em&gt;three&lt;/em&gt; fundamental questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Why opposite keys must be used.&lt;/li&gt;
&lt;li&gt;Why RSA is &lt;em&gt;correct&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Why the inverse of a key …&lt;/li&gt;&lt;/ol&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Mon, 03 Sep 2012 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2012-09-03:/Why-RSA-Works-Three-Fundamental-Questions-Answered.html</guid><category>Essay</category><category>cryptography</category></item><item><title>How RSA Works With Examples</title><link>https://doctrina.org/How-RSA-Works-With-Examples.html</link><description>&lt;h1 id=introduction&gt;Introduction&lt;/h1&gt;
&lt;p&gt;This is part 1 of a series of two blog posts about RSA (&lt;a href="http://doctrina.org/Why-RSA-Works-Three-Fundamental-Questions-Answered.html"&gt;part 2&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt; will explain &lt;em&gt;why&lt;/em&gt; RSA works). In this post, I am going to explain exactly how RSA public key encryption works. One of the &lt;a href="http://doctrina.org/The-3-Seminal-Events-In-Cryptography.html"&gt;3 seminal events in cryptography&lt;/a&gt;&lt;sup class=print&gt;L2&lt;/sup&gt; of the 20th century …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Sat, 26 May 2012 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2012-05-26:/How-RSA-Works-With-Examples.html</guid><category>Essay</category><category>cryptography</category></item><item><title>The 3 Seminal Events In Cryptography</title><link>https://doctrina.org/The-3-Seminal-Events-In-Cryptography.html</link><description>&lt;p&gt;Cryptography is the art/science of keeping a secret. This need has been present since prerecorded human history, but we have some very famous early examples such as the &lt;a href="http://en.wikipedia.org/wiki/Caesar_cipher"&gt;Caesar Cipher&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt;. Yet these early examples were very easy to break. It took until the twentieth century for cryptography to …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Sun, 20 May 2012 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2012-05-20:/The-3-Seminal-Events-In-Cryptography.html</guid><category>Article</category><category>cryptography</category></item><item><title>Upstart With NodeJS And NVM</title><link>https://doctrina.org/NodeJS-Under-NVM-With-Upstart.html</link><description>&lt;p&gt;Yet another very short blog article to help anyone who wants to setup an upstart process that runs a &lt;a href="http://nodejs.org/"&gt;NodeJS&lt;/a&gt;&lt;sup class=print&gt;L1&lt;/sup&gt; app under &lt;a href="https://github.com/creationix/nvm"&gt;nvm&lt;/a&gt;&lt;sup class=print&gt;L2&lt;/sup&gt;. Unlike the &lt;a href="http://doctrina.org/VirtualEnv-With-Upstart.html"&gt;uwsgi setup&lt;/a&gt;&lt;sup class=print&gt;L3&lt;/sup&gt;, there is no specific argument switch to give Node that will make it use nvm environment variables. In fact, since …&lt;/p&gt;</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Barry Steyn</dc:creator><pubDate>Sat, 12 May 2012 00:00:00 -0700</pubDate><guid isPermaLink="false">tag:doctrina.org,2012-05-12:/NodeJS-Under-NVM-With-Upstart.html</guid><category>Article</category><category>System Administration</category></item></channel></rss>